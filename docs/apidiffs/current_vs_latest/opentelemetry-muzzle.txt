Comparing source compatibility of  against 
+++  NEW CLASS: PUBLIC(+) io.opentelemetry.javaagent.tooling.HelperInjector  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: net.bytebuddy.agent.builder.AgentBuilder$Transformer
	+++  NEW CONSTRUCTOR: PUBLIC(+) HelperInjector(java.lang.String, java.util.List, java.util.List, java.lang.ClassLoader, java.lang.instrument.Instrumentation)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.HelperInjector forDynamicTypes(java.lang.String, java.util.Collection, java.lang.instrument.Instrumentation)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) boolean isInjectedClass(java.lang.Class)
	+++  NEW METHOD: PUBLIC(+) net.bytebuddy.dynamic.DynamicType$Builder transform(net.bytebuddy.dynamic.DynamicType$Builder, net.bytebuddy.description.type.TypeDescription, java.lang.ClassLoader, net.bytebuddy.utility.JavaModule)
+++  NEW CLASS: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.AgentCachingPoolStrategy  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: net.bytebuddy.agent.builder.AgentBuilder$PoolStrategy
	+++  NEW CONSTRUCTOR: PUBLIC(+) AgentCachingPoolStrategy()
	+++  NEW METHOD: PUBLIC(+) FINAL(+) net.bytebuddy.pool.TypePool typePool(net.bytebuddy.dynamic.ClassFileLocator, java.lang.ClassLoader)
	+++  NEW METHOD: PUBLIC(+) FINAL(+) net.bytebuddy.pool.TypePool typePool(net.bytebuddy.dynamic.ClassFileLocator, java.lang.ClassLoader, java.lang.String)
+++  NEW CLASS: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.AgentLocationStrategy  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: net.bytebuddy.agent.builder.AgentBuilder$LocationStrategy
	+++  NEW CONSTRUCTOR: PUBLIC(+) AgentLocationStrategy(java.lang.ClassLoader)
	+++  NEW METHOD: PUBLIC(+) net.bytebuddy.dynamic.ClassFileLocator classFileLocator(java.lang.ClassLoader)
	+++  NEW METHOD: PUBLIC(+) net.bytebuddy.dynamic.ClassFileLocator classFileLocator(java.lang.ClassLoader, net.bytebuddy.utility.JavaModule)
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.AgentTooling  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.AgentLocationStrategy locationStrategy()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.AgentLocationStrategy locationStrategy(java.lang.ClassLoader)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.AgentCachingPoolStrategy poolStrategy()
+++  NEW CLASS: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.ClassLoaderMatcher  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.Map matchesAll(java.lang.ClassLoader, boolean)
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.generation.MuzzleCodeGenerationPlugin  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: net.bytebuddy.matcher.ElementMatcher
	+++  NEW INTERFACE: java.io.Closeable
	+++  NEW INTERFACE: net.bytebuddy.build.Plugin
	+++  NEW INTERFACE: java.lang.AutoCloseable
	+++  NEW CONSTRUCTOR: PUBLIC(+) MuzzleCodeGenerationPlugin(java.net.URLClassLoader)
	+++  NEW METHOD: PUBLIC(+) net.bytebuddy.dynamic.DynamicType$Builder apply(net.bytebuddy.dynamic.DynamicType$Builder, net.bytebuddy.description.type.TypeDescription, net.bytebuddy.dynamic.ClassFileLocator)
	+++  NEW METHOD: PUBLIC(+) void close()
	+++  NEW METHOD: PUBLIC(+) boolean matches(net.bytebuddy.description.type.TypeDescription)
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.HelperClassPredicate  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) HelperClassPredicate(java.util.function.Predicate)
	+++  NEW METHOD: PUBLIC(+) boolean isHelperClass(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean isLibraryClass(java.lang.String)
+++  NEW CLASS: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.HelperReferenceWrapper$Factory  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) HelperReferenceWrapper$Factory(net.bytebuddy.pool.TypePool, java.util.Map)
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.HelperReferenceWrapper create(io.opentelemetry.javaagent.tooling.muzzle.references.ClassRef)
+++  NEW CLASS: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.HelperReferenceWrapper$Field  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) HelperReferenceWrapper$Field(java.lang.String, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean equals(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getDescriptor()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getName()
	+++  NEW METHOD: PUBLIC(+) int hashCode()
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.HelperReferenceWrapper$Method  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) HelperReferenceWrapper$Method(boolean, java.lang.String, java.lang.String, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean equals(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getDeclaringClass()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getDescriptor()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getName()
	+++  NEW METHOD: PUBLIC(+) int hashCode()
	+++  NEW METHOD: PUBLIC(+) boolean isAbstract()
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) ABSTRACT(+) io.opentelemetry.javaagent.tooling.muzzle.HelperResource  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) HelperResource()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.HelperResource create(java.lang.String, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.lang.String getAgentPath()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.lang.String getApplicationPath()
+++  NEW CLASS: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.HelperResourceBuilderImpl  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) HelperResourceBuilderImpl()
	+++  NEW METHOD: PUBLIC(+) java.util.List getResources()
	+++  NEW METHOD: PUBLIC(+) void register(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) void register(java.lang.String, java.lang.String)
+++  NEW INTERFACE: PUBLIC(+) ABSTRACT(+) io.opentelemetry.javaagent.tooling.muzzle.InstrumentationModuleMuzzle  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.List getHelperClassNames(io.opentelemetry.javaagent.extension.instrumentation.InstrumentationModule)
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.util.List getMuzzleHelperClassNames()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.util.Map getMuzzleReferences()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.Map getMuzzleReferences(io.opentelemetry.javaagent.extension.instrumentation.InstrumentationModule)
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) void registerMuzzleVirtualFields(io.opentelemetry.javaagent.tooling.muzzle.VirtualFieldMappingsBuilder)
+++  NEW CLASS: PUBLIC(+) ABSTRACT(+) io.opentelemetry.javaagent.tooling.muzzle.Mismatch  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.Mismatch$HelperClassesInjectionError  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) Mismatch$HelperClassesInjectionError()
+++  NEW CLASS: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.Mismatch$InstrumentationModuleClassLoaderMismatch  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) Mismatch$InstrumentationModuleClassLoaderMismatch()
+++  NEW CLASS: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.Mismatch$MissingClass  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) Mismatch$MissingClass(io.opentelemetry.javaagent.tooling.muzzle.references.ClassRef, java.lang.String)
	+++  NEW CONSTRUCTOR: PUBLIC(+) Mismatch$MissingClass(io.opentelemetry.javaagent.tooling.muzzle.references.ClassRef)
+++  NEW CLASS: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.Mismatch$MissingField  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
+++  NEW CLASS: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.Mismatch$MissingFlag  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) Mismatch$MissingFlag(java.util.Collection, java.lang.String, io.opentelemetry.javaagent.tooling.muzzle.references.Flag, int)
+++  NEW CLASS: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.Mismatch$MissingMethod  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) Mismatch$MissingMethod(io.opentelemetry.javaagent.tooling.muzzle.references.ClassRef, io.opentelemetry.javaagent.tooling.muzzle.HelperReferenceWrapper$Method)
	+++  NEW CONSTRUCTOR: PUBLIC(+) Mismatch$MissingMethod(io.opentelemetry.javaagent.tooling.muzzle.references.ClassRef, io.opentelemetry.javaagent.tooling.muzzle.references.MethodRef)
+++  NEW CLASS: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.Mismatch$ReferenceCheckError  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) Mismatch$ReferenceCheckError(java.lang.Exception, io.opentelemetry.javaagent.tooling.muzzle.references.ClassRef, java.lang.ClassLoader)
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.ReferenceCollector  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) ReferenceCollector(java.util.function.Predicate, java.lang.ClassLoader)
	+++  NEW METHOD: PUBLIC(+) void collectReferencesFromAdvice(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) void collectReferencesFromResource(io.opentelemetry.javaagent.tooling.muzzle.HelperResource)
	+++  NEW METHOD: PUBLIC(+) java.util.Map getReferences()
	+++  NEW METHOD: PUBLIC(+) java.util.List getSortedHelperClasses()
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.VirtualFieldMappings getVirtualFieldMappings()
	+++  NEW METHOD: PUBLIC(+) void prune()
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.ReferenceMatcher  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) java.util.List getMismatchedReferenceSources(java.lang.ClassLoader)
	+++  NEW METHOD: PUBLIC(+) boolean matches(java.lang.ClassLoader)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.ReferenceMatcher of(io.opentelemetry.javaagent.extension.instrumentation.InstrumentationModule)
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRef  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRefBuilder builder(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getClassName()
	+++  NEW METHOD: PUBLIC(+) java.util.Set getFields()
	+++  NEW METHOD: PUBLIC(+) java.util.Set getFlags()
	+++  NEW METHOD: PUBLIC(+) java.util.Set getInterfaceNames()
	+++  NEW METHOD: PUBLIC(+) java.util.Set getMethods()
	+++  NEW METHOD: PUBLIC(+) java.util.Set getSources()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getSuperClassName()
		+++  NEW ANNOTATION: javax.annotation.Nullable
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRef merge(io.opentelemetry.javaagent.tooling.muzzle.references.ClassRef)
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRefBuilder  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRefBuilder addField(io.opentelemetry.javaagent.tooling.muzzle.references.Source[], io.opentelemetry.javaagent.tooling.muzzle.references.Flag[], java.lang.String, org.objectweb.asm.Type, boolean)
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRefBuilder addFlag(io.opentelemetry.javaagent.tooling.muzzle.references.Flag)
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRefBuilder addInterfaceName(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRefBuilder addInterfaceNames(java.util.Collection)
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRefBuilder addMethod(io.opentelemetry.javaagent.tooling.muzzle.references.Source[], io.opentelemetry.javaagent.tooling.muzzle.references.Flag[], java.lang.String, org.objectweb.asm.Type, org.objectweb.asm.Type[])
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRefBuilder addSource(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRefBuilder addSource(java.lang.String, int)
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRef build()
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.ClassRefBuilder setSuperClassName(java.lang.String)
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.FieldRef  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) boolean equals(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getDescriptor()
	+++  NEW METHOD: PUBLIC(+) java.util.Set getFlags()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getName()
	+++  NEW METHOD: PUBLIC(+) java.util.Set getSources()
	+++  NEW METHOD: PUBLIC(+) int hashCode()
	+++  NEW METHOD: PUBLIC(+) boolean isDeclared()
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW INTERFACE: PUBLIC(+) ABSTRACT(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) boolean matches(int)
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.lang.String name()
+++  NEW ENUM: PUBLIC(+) ABSTRACT(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$ManifestationFlag  (compatible)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: io.opentelemetry.javaagent.tooling.muzzle.references.Flag
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: java.io.Serializable
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$ManifestationFlag NON_FINAL
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$ManifestationFlag INTERFACE
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$ManifestationFlag FINAL
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$ManifestationFlag ABSTRACT
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$ManifestationFlag NON_INTERFACE
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$ManifestationFlag valueOf(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$ManifestationFlag[] values()
+++  NEW ENUM: PUBLIC(+) ABSTRACT(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$MinimumVisibilityFlag  (compatible)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: io.opentelemetry.javaagent.tooling.muzzle.references.Flag
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: java.io.Serializable
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$MinimumVisibilityFlag PACKAGE_OR_HIGHER
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$MinimumVisibilityFlag PROTECTED_OR_HIGHER
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$MinimumVisibilityFlag PRIVATE_OR_HIGHER
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$MinimumVisibilityFlag PUBLIC
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$MinimumVisibilityFlag valueOf(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$MinimumVisibilityFlag[] values()
+++  NEW ENUM: PUBLIC(+) ABSTRACT(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$OwnershipFlag  (compatible)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: io.opentelemetry.javaagent.tooling.muzzle.references.Flag
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: java.io.Serializable
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$OwnershipFlag NON_STATIC
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$OwnershipFlag STATIC
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$OwnershipFlag valueOf(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$OwnershipFlag[] values()
+++  NEW ENUM: PUBLIC(+) ABSTRACT(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$VisibilityFlag  (compatible)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: io.opentelemetry.javaagent.tooling.muzzle.references.Flag
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: java.io.Serializable
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$VisibilityFlag PACKAGE
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$VisibilityFlag PUBLIC
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$VisibilityFlag PROTECTED
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$VisibilityFlag PRIVATE
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$VisibilityFlag valueOf(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.muzzle.references.Flag$VisibilityFlag[] values()
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.MethodRef  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) boolean equals(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getDescriptor()
	+++  NEW METHOD: PUBLIC(+) java.util.Set getFlags()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getName()
	+++  NEW METHOD: PUBLIC(+) java.util.Set getSources()
	+++  NEW METHOD: PUBLIC(+) int hashCode()
	+++  NEW METHOD: PUBLIC(+) boolean isConstructor()
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.references.Source  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) Source(java.lang.String, int)
	+++  NEW METHOD: PUBLIC(+) boolean equals(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) int getLine()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getName()
	+++  NEW METHOD: PUBLIC(+) int hashCode()
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.ReferencesPrinter  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void printMuzzleReferences()
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.VirtualFieldMappings  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW CONSTRUCTOR: PUBLIC(+) VirtualFieldMappings(java.util.Set)
	+++  NEW METHOD: PUBLIC(+) java.util.Set entrySet()
	+++  NEW METHOD: PUBLIC(+) void forEach(java.util.function.BiConsumer)
	+++  NEW METHOD: PUBLIC(+) boolean hasMapping(java.lang.String, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean isEmpty()
	+++  NEW METHOD: PUBLIC(+) int size()
+++  NEW INTERFACE: PUBLIC(+) ABSTRACT(+) io.opentelemetry.javaagent.tooling.muzzle.VirtualFieldMappingsBuilder  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.javaagent.tooling.muzzle.VirtualFieldMappingsBuilder register(java.lang.String, java.lang.String)
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.muzzle.VirtualFieldMappingsBuilderImpl  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: io.opentelemetry.javaagent.tooling.muzzle.VirtualFieldMappingsBuilder
	+++  NEW CONSTRUCTOR: PUBLIC(+) VirtualFieldMappingsBuilderImpl()
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.VirtualFieldMappings build()
	+++  NEW METHOD: PUBLIC(+) io.opentelemetry.javaagent.tooling.muzzle.VirtualFieldMappingsBuilder register(java.lang.String, java.lang.String)
+++  NEW CLASS: PUBLIC(+) FINAL(+) io.opentelemetry.javaagent.tooling.TransformSafeLogger  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW METHOD: PUBLIC(+) void debug(java.lang.String, java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) void debug(java.lang.String, java.lang.Object, java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) void debug(java.lang.String, java.lang.Object[])
	+++  NEW METHOD: PUBLIC(+) void error(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) void error(java.lang.String, java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) void error(java.lang.String, java.lang.Object, java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) void error(java.lang.String, java.lang.Object[])
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.javaagent.tooling.TransformSafeLogger getLogger(java.lang.Class)
	+++  NEW METHOD: PUBLIC(+) boolean isDebugEnabled()
	+++  NEW METHOD: PUBLIC(+) boolean isTraceEnabled()
	+++  NEW METHOD: PUBLIC(+) void trace(java.lang.String, java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) void trace(java.lang.String, java.lang.Object, java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) void trace(java.lang.String, java.lang.Object[])
	+++  NEW METHOD: PUBLIC(+) void warn(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) void warn(java.lang.String, java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) void warn(java.lang.String, java.lang.Object, java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) void warn(java.lang.String, java.lang.Object[])
